{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","utils/validators/validators.js","components/Login/Login.jsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","child","Input","required","value","maxLengthCreator","maxLength","length","maxLength25","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","placeholder","validate","name","component","type","formSummeryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,+MCGrHC,EAAc,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACpCC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,IAAtE,UACI,8BACKC,IAEHC,GAAY,+BAAOF,QAMpBM,EAAW,SAACC,GACrB,IAAOC,EAAoCD,EAApCC,MAAuBC,GAAaF,EAA7BT,KAA6BS,EAAvBG,MAApB,YAA2CH,EAA3C,IACA,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,oDAAcC,GAAWC,QAI/CE,EAAQ,SAACJ,GAClB,IAAOC,EAAoCD,EAApCC,MAAuBC,GAAaF,EAA7BT,KAA6BS,EAAvBG,MAApB,YAA2CH,EAA3C,IACA,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAwB,iDAAWC,GAAWC,S,iCCzBzD,oEAAO,IAAMG,EAAW,SAAAC,GACpB,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCPlC,oGAUME,EAAcH,YAAiB,IAgC/BI,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EA9BL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcrB,EAAW,EAAXA,MAC9B,OACI,uBAAMsB,SAAUD,EAAhB,UACI,8BACI,cAAC,IAAD,CAAOE,YAAa,QACbC,SAAU,CAACZ,IAAUK,GACrBQ,KAAM,QACNC,UAAWf,QAEtB,8BACI,cAAC,IAAD,CAAOY,YAAa,WACbC,SAAU,CAACZ,IAAUK,GACrBQ,KAAM,WACNE,KAAM,WACND,UAAWf,QAEtB,gCACI,cAAC,IAAD,CAAOe,UAAWf,IACXc,KAAM,aACNE,KAAM,aAHjB,iBAKC3B,GAAS,qBAAKG,UAAWC,IAAOwB,iBAAvB,SACL5B,IAEL,8BACI,mDA0BD6B,uBAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,WAA1BJ,EAlBD,SAACtB,GAKX,OAAIA,EAAMwB,OACC,cAAC,IAAD,CAAUG,GAAI,aAElB,gCACH,uCACA,cAAChB,EAAD,CAAgBI,SATH,SAACa,GACd5B,EAAM0B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.ccfe036e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummeryError\":\"FormsControls_formSummeryError__1QrDT\"};","import React from \"react\";\nimport styles from \"./FormsControls.module.css\";\n\n\nconst FormControl = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            { hasError && <span>{error}</span> }\n        </div>\n    )\n}\n\n\nexport const Textarea = (props) => {\n    const {input, meta, child, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\n\nexport const Input = (props) => {\n    const {input, meta, child, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}","export const required = value => {\n    if (value) return undefined;\n\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","import React from \"react\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Input} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {Redirect} from \"react-router-dom\";\nimport styles from \"./../common/FormsControls/FormsControls.module.css\"\n\n\nconst maxLength25 = maxLengthCreator(25);\n\nconst LoginForm = ({handleSubmit, error}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field placeholder={\"Email\"}\n                       validate={[required, maxLength25]}\n                       name={\"email\"}\n                       component={Input}/>\n            </div>\n            <div>\n                <Field placeholder={\"Password\"}\n                       validate={[required, maxLength25]}\n                       name={\"password\"}\n                       type={\"password\"}\n                       component={Input}/>\n            </div>\n            <div>\n                <Field component={Input}\n                       name={\"rememberMe\"}\n                       type={\"checkbox\"}/>remember me\n            </div>\n            {error && <div className={styles.formSummeryError}>\n                {error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\n\n\nconst Login = (props) => {\n    const onSubmit = (formData) => {\n        props.login(formData.email, formData.password, formData.rememberMe);\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={\"/profile\"}/>\n    }\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit}/>\n    </div>\n}\n\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}